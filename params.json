{"name":"Ngforce","tagline":"Force.com Angular.js framework. A better description forthwith.","body":"ngForce\r\n=======\r\n\r\nForce.com Angular.js framework.\r\n\r\nYou can find the production ready version of the library under js/ngForce/\r\n\r\nNote: this is distributed unminified so that you can minify it with the rest of your Angular.js code\r\n\r\nUsage\r\n======\r\n\r\nDuring the creation of your application module, inject the ngForce dependcy thusly:\r\n```javascript\r\nvar app = angular.module('ngForceDemo', ['ui.bootstrap', 'ui', 'ngForce']);\r\n```\r\n\r\nOnce your app Module has been defined, you can include the service ngForce provides, 'vfr' in any of your controllers by adding it to the dependency injection list like this:\r\n```javascript\r\napp.controller('oppBoxCtrl', function($scope, $dialog, vfr)\r\n```\r\n\r\nThereafter in the controller you can utilize the vfr service much like the $http, or $q services in Angular.\r\nvfr returns a promise, and therefore your controllers can have a clean(er), less call-back-hell flow to them. Additionally, because promises are binary, you can group vfr callouts and act on that data only once all of the promises have resolved. For example, here's a simple SOQL query returning records via promise:\r\n\r\n```javascript\r\nvar pOppQuery = vfr.query(\"SELECT Id, Name, Account.Name, LeadSource, Probability, CloseDate, StageName, Amount FROM Opportunity ORDER BY CloseDate DESC\");\r\npOppQuery.then(function(d) {\r\n\t$scope.opportunities = d.records;\r\n\tif(!$scope.$$phase) {\r\n\t\t$scope.$digest();\r\n\t}\r\n});\r\n```\r\n\r\nWhy is this important?\r\n======================\r\nAngular requires you, the developer, to forcibly update the $scope using $scope.$apply, or better yet $scope.$digest whenever you consume data from an external service, such as a custom api like Salesforce / apex. The promise backed interface that ngForce exposes allows you to run the N number of queries needed to display the page, and *yet only update the $scope once.* \r\n\r\nSay more, How do I do that?\r\n\r\nYou can also execute several promises and delay the execution of a singular callback to handle all of them: \r\n```javascript\r\nvar pQuery1 = vfr.query(\"Select Id from Account\");\r\nvar pQuery2 = vfr.query(\"Select Id from Contact\");\r\n\r\n$.when(pQuery1, pQuery2).done(function{\r\n\t//now do stuff! with both data sets\r\n\t//...\r\n\t//now update the scope.\r\n\t//if(!$scope.$$phase) {\r\n\t//\t$scope.$digest();\r\n\t//}\r\n});\r\n``` \r\n\r\n\r\n","google":"UA-40872097-1","note":"Don't delete this file! It's used internally to help with page regeneration."}